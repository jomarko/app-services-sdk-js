/* tslint:disable */
/* eslint-disable */
/**
 * Red Hat Openshift SmartEvents Fleet Manager
 * The API exposed by the fleet manager of the SmartEvents service.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: openbridge-dev@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorsList } from '../model';
// @ts-ignore
import { ManagedResourceStatus } from '../model';
// @ts-ignore
import { ProcessingErrorListResponse } from '../model';
/**
 * ProcessingErrorsApi - axios parameter creator
 * @export
 */
export const ProcessingErrorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the list of errors for a particular Bridge instance for the authenticated user.
         * @summary Get the list of errors for a particular Bridge instance
         * @param {string} bridgeId 
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {Set<ManagedResourceStatus>} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBridgeErrors: async (bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bridgeId' is not null or undefined
            assertParamExists('getBridgeErrors', 'bridgeId', bridgeId)
            const localVarPath = `/api/smartevents_mgmt/v1/bridges/{bridgeId}/errors`
                .replace(`{${"bridgeId"}}`, encodeURIComponent(String(bridgeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (status) {
                localVarQueryParameter['status'] = Array.from(status);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProcessingErrorsApi - functional programming interface
 * @export
 */
export const ProcessingErrorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProcessingErrorsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the list of errors for a particular Bridge instance for the authenticated user.
         * @summary Get the list of errors for a particular Bridge instance
         * @param {string} bridgeId 
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {Set<ManagedResourceStatus>} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBridgeErrors(bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessingErrorListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBridgeErrors(bridgeId, name, page, size, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProcessingErrorsApi - factory interface
 * @export
 */
export const ProcessingErrorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProcessingErrorsApiFp(configuration)
    return {
        /**
         * Get the list of errors for a particular Bridge instance for the authenticated user.
         * @summary Get the list of errors for a particular Bridge instance
         * @param {string} bridgeId 
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {Set<ManagedResourceStatus>} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBridgeErrors(bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: any): AxiosPromise<ProcessingErrorListResponse> {
            return localVarFp.getBridgeErrors(bridgeId, name, page, size, status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProcessingErrorsApi - interface
 * @export
 * @interface ProcessingErrorsApi
 */
export interface ProcessingErrorsApiInterface {
    /**
     * Get the list of errors for a particular Bridge instance for the authenticated user.
     * @summary Get the list of errors for a particular Bridge instance
     * @param {string} bridgeId 
     * @param {string} [name] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {Set<ManagedResourceStatus>} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessingErrorsApiInterface
     */
    getBridgeErrors(bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: AxiosRequestConfig): AxiosPromise<ProcessingErrorListResponse>;

}

/**
 * ProcessingErrorsApi - object-oriented interface
 * @export
 * @class ProcessingErrorsApi
 * @extends {BaseAPI}
 */
export class ProcessingErrorsApi extends BaseAPI implements ProcessingErrorsApiInterface {
    /**
     * Get the list of errors for a particular Bridge instance for the authenticated user.
     * @summary Get the list of errors for a particular Bridge instance
     * @param {string} bridgeId 
     * @param {string} [name] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {Set<ManagedResourceStatus>} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessingErrorsApi
     */
    public getBridgeErrors(bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: AxiosRequestConfig) {
        return ProcessingErrorsApiFp(this.configuration).getBridgeErrors(bridgeId, name, page, size, status, options).then((request) => request(this.axios, this.basePath));
    }
}
